import sys
from pathlib import Path
import logging
import os
from typing import Dict
import asyncio
from datetime import datetime
import time
import threading
from concurrent.futures import ThreadPoolExecutor, Future
from queue import Queue

# Add project root to Python path
project_root = Path(__file__).parent.parent.parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Import utilities using FileFinder
from modules.VIII_utils.file_finder import FileFinder
finder = FileFinder()

# Import required modules
TwilioAPI = finder.get_class('twilio_API.py', 'TwilioAPI')
FalAPI = finder.get_class('fal_API.py', 'FalAPI')
utils = finder.import_module('utils.py')
printColoured = utils.printColoured

# Setup logging with colors
class ColoredFormatter(logging.Formatter):
    def format(self, record):
        if record.levelno == logging.INFO:
            if "TEST" in record.msg:
                return f"\n{printColoured('🔹 ' + record.msg, 'magenta')}"
            elif "SUCCESS" in record.msg:
                return f"{printColoured('✓ ' + record.msg, 'green')}"
            else:
                return f"{printColoured('> ' + record.msg, 'blue')}"
        elif record.levelno == logging.ERROR:
            return f"{printColoured('❌ ' + record.msg, 'red')}"
        return record.msg

logger = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(ColoredFormatter())
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def format_response(response: Dict) -> None:
    """Format and log API response"""
    if response.get('error_message'):
        logger.error(f"Error: {response['error_message']}")
        return
        
    logger.info(f"SUCCESS: Message sent (SID: {response['sid']})")
    logger.info(f"Status: {response['status']}")
    if response.get('media_url'):
        logger.info(f"Media URL: {response['media_url']}")

async def generate_arx_images() -> list:
    """Generate test images using ArX/Fal"""
    logger.info("Generating test images with ArX...")
    fal = FalAPI()
    
    prompts = [
        # Showcases character design capabilities
        """A cinematic scene of a digital artist using ArX AI tools to create a hyper-detailed 
        cyberpunk character for a AAA video game. The holographic display shows: left - concept 
        sketches with dynamic posing, center - AI-generated texture variations, right - final 
        3D model with realistic materials and perfect topology for animation. Studio 
        workstation with Wacom tablet and 3D printer in background.""",
        
        # Demonstrates real-world product design application
        """Futuristic automotive design studio where engineers collaborate with ArX AI: Human 
        designers sketch concept curves on light tables while AI generates real-time aerodynamics 
        simulations and 3D-printable components. A gleaming electric vehicle chassis takes shape 
        in the center, blending organic forms with technical precision. Photorealistic 
        rendering with Arvolve branding visible on workstation tools."""
    ]
    
    images = []
    for prompt in prompts:
        try:
            image_url = await fal.generate_image_flux(prompt=prompt)
            if image_url:
                images.append({
                    'url': image_url,
                    'caption': "Generated by ArX 🎨✨"
                })
        except Exception as e:
            logger.error(f"Failed to generate image: {str(e)}")
    
    return images

def send_initial_template(twilio: TwilioAPI, number: str) -> bool:
    """Send initial template message and wait for opt-in"""
    try:
        logger.info("TEST: Sending Initial Template")
        response = twilio.send_template(
            to=number,
            template_id="HXa7eda43a77a0cf4460c0796834bc3991",
            variables={}
        )
        format_response(response)
        
        # Wait for potential opt-in (in real scenario, this would be handled by webhook)
        logger.info("Waiting 10 seconds for potential opt-in...")
        time.sleep(10)
        return True
        
    except Exception as e:
        logger.error(f"Failed to send template: {str(e)}")
        return False

def test_welcome_sequence(twilio: TwilioAPI, test_number: str) -> None:
    """Test welcome message sequence"""
    logger.info("TEST: Welcome Sequence")
    
    welcome_messages = [
        "Thank you for connecting with Arvolve! 🎨",
        "We're at the forefront of AI-powered art evolution, creating a new renaissance in digital creativity.",
    ]
    
    for msg in welcome_messages:
        try:
            logger.info(f"Sending: {msg}")
            response = twilio.send_message(to=test_number, message=msg)
            format_response(response)
            delay = twilio.calculate_message_delay(msg)
            logger.info(f"Waiting {delay:.1f}s...")
            time.sleep(delay)
        except Exception as e:
            logger.error(f"Failed to send message: {str(e)}")

async def test_capabilities_showcase(twilio: TwilioAPI, test_number: str) -> None:
    """Showcase ArX capabilities with generated images"""
    logger.info("TEST: Capabilities Showcase")
    
    # Start image generation in a separate thread
    with ThreadPoolExecutor() as executor:
        future_images = executor.submit(asyncio.run, generate_arx_images())
        
        # Send anticipation message while images are being generated
        try:
            msg = "Let me generate some examples for you with ArX, our AI engine... 🎨"
            response = twilio.send_message(to=test_number, message=msg)
            format_response(response)
            delay = twilio.calculate_message_delay(msg)
            time.sleep(delay)
            
            msg = "Creating something special... ✨"
            response = twilio.send_message(to=test_number, message=msg)
            format_response(response)
            delay = twilio.calculate_message_delay(msg)
            time.sleep(delay)
        except Exception as e:
            logger.error(f"Failed to send message: {str(e)}")
    
    # Wait for images to be ready
    images = future_images.result()
    
    if images:
        try:
            msg = "Here's what ArX just created for you... 🤖✨"
            response = twilio.send_message(to=test_number, message=msg)
            format_response(response)
            delay = twilio.calculate_message_delay(msg)
            time.sleep(delay)
        except Exception as e:
            logger.error(f"Failed to send message: {str(e)}")
    
    # Send images with context
    for i, img in enumerate(images, 1):
        try:
            logger.info(f"Sending ArX generated image {i}")
            response = twilio.send_image(
                to=test_number,
                image_url=img['url'],
                caption=img['caption']
            )
            format_response(response)
            time.sleep(3)  # Fixed delay after images
        except Exception as e:
            logger.error(f"Failed to send image: {str(e)}")
    
    # Send service information
    services = [
        "🎯 Our core services include:",
        "• Character Design for Production",
        "• Concept Design & Development",
        "• AI Prototyping & Consulting",
        "\nWould you like to learn more about any specific service? Visit www.arvolve.ai"
    ]
    
    for msg in services:
        try:
            response = twilio.send_message(to=test_number, message=msg)
            format_response(response)
            delay = twilio.calculate_message_delay(msg)
            time.sleep(delay)
        except Exception as e:
            logger.error(f"Failed to send message: {str(e)}")

def test_account_info(twilio: TwilioAPI) -> None:
    """Test account information retrieval"""
    logger.info("TEST: Account Information")
    
    try:
        info = twilio.get_account_info()
        logger.info("\n📊 Account Details:")
        logger.info(f"Name: {info['account_name']}")
        logger.info(f"Status: {info['status']}")
        logger.info(f"Type: {info['type']}")
        logger.info(f"Messages Today: {info['today_messages']}")
        logger.info(f"Cost Today: ${info['today_cost']:.2f}")
    except Exception as e:
        logger.error(f"Failed to get account info: {str(e)}")

async def main():
    """Run WhatsApp API test suite"""
    logger.info("\n🚀 Starting WhatsApp API Test Suite")
    logger.info("=" * 50)
    
    try:
        # Initialize API
        twilio = TwilioAPI()
        
        # Get test number from environment
        test_number = os.getenv('your_number')
        perry_number = "whatsapp:+447999093975"
        test_number = perry_number
        if not test_number:
            logger.error("Missing required environment variable: your_number")
            return
            
        logger.info(f"Using test number: {test_number}")
        
        # Run test suite in sequence
        if send_initial_template(twilio, test_number):
            test_welcome_sequence(twilio, test_number)
            await test_capabilities_showcase(twilio, test_number)
            test_account_info(twilio)
            logger.info("\n✨ Test Suite Completed Successfully")
        else:
            logger.error("Test suite aborted: Failed to send initial template")
        
    except Exception as e:
        logger.error(f"Test suite failed: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(main()) 